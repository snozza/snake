;; Analyzed by ClojureScript 1.8.34
{:use-macros nil, :excludes #{}, :name snake.view, :imports {Md5 goog.crypt.Md5}, :requires {goog.crypt goog.crypt, goog.dom.forms goog.dom.forms, Md5 goog.crypt.Md5, forms goog.dom.forms, model snake.model, events goog.events, snake.model snake.model, crypt goog.crypt, string clojure.string, KeyCodes goog.events.KeyCodes, communication snake.communication, clojure.string clojure.string, goog.events.KeyCodes goog.events.KeyCodes, goog.events goog.events, snake.communication snake.communication}, :uses nil, :defs {get-length {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 153, :column 7, :end-line 153, :end-column 17, :arglists (quote ([[uid [health x y dx dy length path username]]]))}, :name snake.view/get-length, :variadic false, :file "src/snake/view.cljs", :end-column 17, :method-params ([p__23375]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[uid [health x y dx dy length path username]]]))}, main {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 186, :column 7, :end-line 186, :end-column 11, :arglists (quote ([]))}, :name snake.view/main, :variadic false, :file "src/snake/view.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, board {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 87, :column 7, :end-line 87, :end-column 12, :arglists (quote ([{{:keys [board players]} :world, my-uid :uid}]))}, :name snake.view/board, :variadic false, :file "src/snake/view.cljs", :end-column 12, :method-params ([p__23323]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [board players]} :world, my-uid :uid}]))}, gravatar-img {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 161, :column 7, :end-line 161, :end-column 19, :arglists (quote ([email]))}, :name snake.view/gravatar-img, :variadic false, :file "src/snake/view.cljs", :end-column 19, :method-params ([email]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([email]))}, respawn-form {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 118, :column 7, :end-line 118, :end-column 19, :arglists (quote ([]))}, :name snake.view/respawn-form, :variadic false, :file "src/snake/view.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, pixel {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 53, :column 7, :end-line 53, :end-column 12, :arglists (quote ([uid i j my-uid]))}, :name snake.view/pixel, :variadic false, :file "src/snake/view.cljs", :end-column 12, :method-params ([uid i j my-uid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 4, :fn-var true, :arglists (quote ([uid i j my-uid]))}, dir {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 13, :column 7, :end-line 13, :end-column 10, :arglists (quote ([e [dx dy]]))}, :name snake.view/dir, :variadic false, :file "src/snake/view.cljs", :end-column 10, :method-params ([e p__23314]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([e [dx dy]]))}, keydown {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 17, :column 7, :end-line 17, :end-column 14, :arglists (quote ([e]))}, :name snake.view/keydown, :variadic false, :file "src/snake/view.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, eye {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 58, :column 7, :end-line 58, :end-column 10, :arglists (quote ([dx dy]))}, :name snake.view/eye, :variadic false, :file "src/snake/view.cljs", :end-column 10, :method-params ([dx dy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dx dy]))}, listener {:name snake.view/listener, :file "src/snake/view.cljs", :line 30, :column 1, :end-line 30, :end-column 18, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 30, :column 10, :end-line 30, :end-column 18}}, click {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 67, :column 7, :end-line 67, :end-column 12, :arglists (quote ([e]))}, :name snake.view/click, :variadic false, :file "src/snake/view.cljs", :end-column 12, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, food {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 44, :column 7, :end-line 44, :end-column 11, :arglists (quote ([i j]))}, :name snake.view/food, :variadic false, :file "src/snake/view.cljs", :end-column 11, :method-params ([i j]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i j]))}, md5-hash {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 156, :column 7, :end-line 156, :end-column 15, :arglists (quote ([s]))}, :name snake.view/md5-hash, :variadic false, :file "src/snake/view.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, segment {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([uid i j me?]))}, :name snake.view/segment, :variadic false, :file "src/snake/view.cljs", :end-column 14, :method-params ([uid i j me?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 4, :fn-var true, :arglists (quote ([uid i j me?]))}, scores {:protocol-inline nil, :meta {:file "/Users/andrew.snead/personal_projects/snake/src/snake/view.cljs", :line 164, :column 7, :end-line 164, :end-column 13, :arglists (quote ([{{:keys [board players]} :world, my-uid :uid}]))}, :name snake.view/scores, :variadic false, :file "src/snake/view.cljs", :end-column 13, :method-params ([p__23380]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [board players]} :world, my-uid :uid}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :thead :rx :r :stroke :transform :tbody :table :color :preserve-aspect-ratio :key :font-size :button :top :div.content :float :uid :td.number :name :td :fill :th :alive :background-color :tr :default-value :username :circle :width :type :src :view-box :on-click :center :style :div :world :g :z-index :stroke-width :cx :label :cy :auto-focus :players :on-submit :position :br :x :form :input :target :h1 :rect :p :svg.board :href :img :a :height :board}, :order [:rect :x :y :fill :stroke-width :stroke :rx :width :height :circle :cx :cy :r :world :board :players :uid :svg.board :on-click :view-box :preserve-aspect-ratio :key :alive :g :transform :div :style :position :top :z-index :h1 :form :on-submit :label :input :type :name :auto-focus :default-value :username :font-size :button :br :a :href :target :float :table :thead :tr :th :tbody :td.number :td :color :background-color :img :src :div.content :center :p]}, :doc nil}